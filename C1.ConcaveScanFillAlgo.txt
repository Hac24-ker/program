#include <graphics.h>
#include <iostream>
using namespace std;

void scanFill(int polyX[], int polyY[], int n, int fillColor) {
    int minY = polyY[0], maxY = polyY[0];
    for (int i = 1; i < n; i++) {
        if (polyY[i] < minY) minY = polyY[i];
        if (polyY[i] > maxY) maxY = polyY[i];
    }
    for (int y = minY; y <= maxY; y++) {
        int intersections[n], k = 0;
        for (int i = 0; i < n; i++) {
            int next = (i + 1) % n;
            if (polyY[i] <= y && polyY[next] > y || polyY[i] > y && polyY[next] <= y) {
                float slope = (float)(polyX[next] - polyX[i]) / (polyY[next] - polyY[i]);
                intersections[k++] = polyX[i] + slope * (y - polyY[i]);
            }
        }
        for (int i = 0; i < k - 1; i++) {
            for (int j = i + 1; j < k; j++) {
                if (intersections[i] > intersections[j]) {
                    swap(intersections[i], intersections[j]);
                }
            }
        }
        for (int i = 0; i < k; i += 2) {
            line(intersections[i], y, intersections[i + 1], y);
            setcolor(fillColor);
        }
    }
}

int main() {
    int gd = DETECT, gm;
    initgraph(&gd, &gm, NULL);
    int polyX[] = {100, 150, 200, 150, 120};
    int polyY[] = {100, 50, 100, 150, 120};
    int n = sizeof(polyX) / sizeof(polyX[0]);
    for (int i = 0; i < n; i++) {
        line(polyX[i], polyY[i], polyX[(i + 1) % n], polyY[(i + 1) % n]);
    }
    scanFill(polyX, polyY, n, YELLOW);
    getch();
    closegraph();
    return 0;
}